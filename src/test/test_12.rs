use crate::core::Matrix;

pub fn test_12() {
    let u = Matrix::from(vec![vec![1., 0., 0.], vec![0., 1., 0.], vec![0., 0., 1.]]);
    println!("{}\n", u.inverse().unwrap());
    // [1.0, 0.0, 0.0]
    // [0.0, 1.0, 0.0]
    // [0.0, 0.0, 1.0]
    let u = Matrix::from(vec![vec![2., 0., 0.], vec![0., 2., 0.], vec![0., 0., 2.]]);
    println!("{}\n", u.inverse().unwrap());
    // [0.5, 0.0, 0.0]
    // [0.0, 0.5, 0.0]
    // [0.0, 0.0, 0.5]
    let u = Matrix::from(vec![
        vec![8., 5., -2.],
        vec![4., 7., 20.],
        vec![7., 6., 1.]
    ]);
    println!("{}\n", u.inverse().unwrap());
    // [0.649425287, 0.097701149, -0.655172414]
    // [-0.781609195, -0.126436782, 0.965517241]
    // [0.143678161, 0.074712644, -0.206896552]
    let u = Matrix::from(vec![
        vec![1., 2., 3., 4., 5.],
        vec![0., 1., 2., 3., 4.],
        vec![0., 0., 1., 2., 3.],
        vec![0., 0., 0., 1., 2.],
        vec![0., 0., 0., 0., 1.],
    ]);
    println!("{}\n", u.inverse().unwrap());
    // [1.0, -2.0, 1.0, 0.0, 0.0]
    // [0.0, 1.0, -2.0, 1.0, 0.0]
    // [0.0, 0.0, 1.0, -2.0, 1.0]
    // [0.0, 0.0, 0.0, 1.0, -2.0]
    // [0.0, 0.0, 0.0, 0.0, 1.0]
}
